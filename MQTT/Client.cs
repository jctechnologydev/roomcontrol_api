/**	<copyright company="RJ2">*		Copyright (c) 2022 All Rights Reserved*	</copyright>* 	<authors> Joel Jonassi & Rui Alves</authors>*   <date> 12/2022 1:06:59 AM</date>*	<description></description>**/using System.Runtime.Loader;using System.Text;using System.Text.Json.Serialization;using DAL.Model;using MQTT.Interface;using MQTT.Model;using Newtonsoft.Json;using uPLibrary.Networking.M2Mqtt.Messages;using JsonSerializer = System.Text.Json.JsonSerializer;using MqttClient = uPLibrary.Networking.M2Mqtt.MqttClient;namespace MQTT;public class Client : IMqtt{    private static readonly string mqttServer = "test.mosquitto.org";    /// <summary>    /// M�todo para fazer o publish de uma mensagem via MQTT    /// </summary>    /// <param name="topic">T�pico da mensagem</param>    /// <param name="message">A mensagem a ser enviada</param>    public void Publish_Message(string topic, string message)    {        try        {            MqttClient mqttClient = new MqttClient(mqttServer);            mqttClient.Connect("App1Publish");            mqttClient.Publish(topic, Encoding.UTF8.GetBytes(message));        }        catch (Exception e)        {            Console.WriteLine(e);        }    }    /// <summary>    /// M�todo para o envio da mensagem para o sistema IoT    /// A messagem pode ser uma opera��o para ligar ligar/desligar luzes    /// Envio dos dados    /// </summary>    /// <param name="operation">Nome da oper��o a ser enviada</param>    /// <param name="idActuator">id do atuador a receber a obter no microcontrolador</param>    /// <param name="state">O estado que atuador passar� a ter</param>    public void SendMessage(string operation, int idActuator, string state)    {        string topic = "IPCA/TEST";        topic += "/room";        ActuatorSetter actuatorSetter = new ActuatorSetter()        {            Id = idActuator,            Operation = operation,            Value = state        };        string message = JsonSerializer.Serialize(actuatorSetter);        Publish_Message(topic, message);    }    private Callback _callback = null;    /// <summary>    /// Método para escuta MQTT    /// </summary>    /// <param name="callback"></param>    public void StartListening(Callback callback)    {        _callback = callback;        Subscribe_Topic();    }    /// <summary>    /// Método para subscrever ao tópico enviado pelo sistema IoT    /// Receção dos dados    /// </summary>    public void Subscribe_Topic()    {        new Thread(() =>        {            try            {                MqttClient mqttClient = new MqttClient(mqttServer);                mqttClient.MqttMsgPublishReceived += MqttClient_MqttMsgPublishReceived;                mqttClient.Subscribe(new[] { "IPCA/TEST" }, new byte[] { MqttMsgBase.QOS_LEVEL_AT_LEAST_ONCE });                mqttClient.Connect("App1Receiver");            }            catch (Exception e)            {                Console.WriteLine(e);            }        }).Start();    }    /// <summary>    /// Método para deserializar os dados recebidos via MQTT    /// </summary>    /// <param name="sender"></param>    /// <param name="e">A mensagem recebida via MQTT</param>    private void MqttClient_MqttMsgPublishReceived(object sender, MqttMsgPublishEventArgs e)    {        var json = Encoding.UTF8.GetString(e.Message);        try        {            var list = JsonConvert.DeserializeObject<List<DataArduino>>(json);            if (_callback != null)            {                _callback.Invoke(list);            }        }        catch (Exception exception)        {            Console.WriteLine(exception);        }    }    class MyClass    {        private int _idRoom;        private int _idHardware;        private string _value;        public int IdRoom        {            get => _idRoom;            set => _idRoom = value;        }        public int IdHardware        {            get => _idHardware;            set => _idHardware = value;        }        public string Value        {            get => _value;            set => _value = value ?? throw new ArgumentNullException(nameof(value));        }    }    }